{"version":3,"sources":["components/TaskItem/TaskItem.js","components/TasksContainer/TasksContainer.js","components/Shelf/Shelf.js","App.js","serviceWorker.js","index.js"],"names":["TaskItem","props","className","id","isCompleted","data-toggle","data-placement","title","taskID","display","deadline","text","TasksContainer","tTasks","tasksHTML","i","length","push","getTasks","Shelf","bTasks","bottlesHTML","bottle","getBottleTasks","App","useState","shelf","tasks","sTasks","shelvesHTML","getShelfTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25599fc2.chunk.js","sourcesContent":["import React from 'react';\nimport './TaskItem.css';\n\nfunction TaskItem(props) {\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\" id={`${props.isCompleted ? \"completed-task-body\" : \"task-body\"}`} /*style={{width: auto}}*/>\n        <div className=\"row\">\n          <h6 className=\"card-title col-2\" id=\"id-text\" data-toggle=\"tooltip\" data-placement=\"left\" title=\"Tick/Untick to complete/uncomplete\">{props.taskID}</h6>\n          <h6 className=\"card-text col-8\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Optional deadline\" display=\"inline\">{props.deadline}</h6>\n          <h6 className=\"card-title col-2\" id=\"id-text\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete task\">X</h6>\n          <p className=\"card-text col-12\" id={`${props.isCompleted ? \"completed-task-text\":\"task-text\"}`} data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Add task text\">{props.text}</p>                                                 \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskItem;","import React from 'react';\nimport './TasksContainer.css';\nimport TaskItem from '../TaskItem/TaskItem';\n\n\n\n\n\nfunction TasksContainer(props) {\n\n  let taskItems = 0;\n\n  let tTasks = [];\n\n  function getTasks(props) {\n\n    let tasksHTML = '';\n\n    // defines and populates the tasks\n    for (let i = 0; i < props.length; i++) {\n      tTasks.push(); // can eventually add an if here to separate bs and ns. for now, 1 array.\n    }\n\n    // returns the correctly formatted html to define the bottles\n    for (let i = 0; i < tTasks; i++) {\n      tasksHTML += `<TaskItem text=${tTasks[i].text} isCompleted=${tTasks[i].isCompleted} taskID=${tTasks[i].taskID}/>`;\n    }\n    return tasksHTML; // needs to return a bottle component with tasks\n  }\n\n\n  return (\n    <div className=\"container col-12 col-md-6 col-lg-4 col-xl-3 align-self-end task-box\">\n        {getTasks(props)}\n        <TaskItem/>\n        <h2>{taskItems} Task(s)</h2>\n    </div>\n  );\n}\n\nexport default TasksContainer;","import React from 'react';\nimport './Shelf.css';\nimport TasksContainer from '../TasksContainer/TasksContainer';\n\nfunction Shelf(props) {\n\n  let bTasks = [];\n\n  function getBottleTasks(props) {\n\n    let bottlesHTML = '';\n\n    // defines and populates the bottles\n    for (let i = 0; i < props.length; i++) {\n      if (props.bottle === i) bTasks[i].push();\n    }\n\n    // returns the correctly formatted html to define the bottles\n    for (let i = 0; i < bTasks; i++) {\n      bottlesHTML += `<TaskContainer bottleTasks=${bTasks[i]}/>`;\n    }\n    return bottlesHTML; // needs to return a bottle component with tasks\n  }\n\n  return (\n    <div>\n        <div className=\"container screen\">\n            <div className=\"row\" id=\"nowrap\">\n                {getBottleTasks(props)}\n              <TasksContainer/>\n            </div>\n        </div>\n        <div className = \"row shelf\" id=\"nowrap\"></div>\n    </div>\n  );\n}\n\nexport default Shelf;","import React, { useState } from 'react';\nimport './App.css';\nimport Shelf from './components/Shelf/Shelf';\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([\n    { text: 'Flys to Mars', isCompleted: true, shelf: 1, bottle:1,  taskID: 1 /*an array instead with a b/n bool*/ },\n    { text: 'Get marooned', isCompleted: false, shelf: 1, bottle:1,  taskID: 3 },\n    { text: 'Grow spuds from poo', isCompleted: false, shelf:1, bottle:1,  taskID: 2},\n    { text: 'Walk cats', isCompleted: true, shelf:1, bottle:2,  taskID: 4 },\n    { text: 'Wash dinner', isCompleted: true, shelf: 2, bottle:1,  taskID: 5 },\n    { text: 'Dress dog', isCompleted: false, shelf: 2, bottle:1,  taskID: 6 },\n    { text: 'Walk kids', isCompleted: true, shelf: 2, bottle:1,  taskID: 7 },\n    { text: 'Watch Alien', isCompleted: false, shelf: 3, bottle:1,  taskID: 8 },\n    { text: 'Watch Aliens', isCompleted: true, shelf: 3, bottle:1,  taskID: 9 },\n    { text: 'Go to bed', isCompleted: false, shelf: 3, bottle:2, taskID: 10 },\n  ]);\n\n  let sTasks = [];\n\n  function getShelfTasks(tasks) {\n\n    let shelvesHTML = '';\n\n    // defines and populates the shelves\n    for (let i = 0; i < tasks.length; i++) {\n      if (tasks.shelf === i) sTasks[i].push();\n    }\n\n    // returns the correctly formatted html to define the shelves\n    for (let i = 0; i < sTasks; i++) {\n      shelvesHTML += `<Shelf shelfTasks=${sTasks[i]}/>`;\n    }\n    return shelvesHTML; // needs to return a shelf component with tasks\n  }\n\n  return (\n    <div className=\"App\">\n      {getShelfTasks(tasks)}\n      <Shelf/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}