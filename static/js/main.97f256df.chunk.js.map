{"version":3,"sources":["icons/deleteIcon.svg","icons/upIcon.svg","icons/downIcon.svg","icons/addIcon.svg","components/TaskItem/TaskItem.js","components/AddTask/AddTask.js","components/Bottle/Bottle.js","components/Shelf/Shelf.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskItem","props","className","id","completed","data-toggle","data-placement","title","type","defaultChecked","onClick","completeTask","taskID","htmlFor","display","deadline","deleteTask","src","deleteIcon","alt","text","AddTask","useState","setText","dueDate","setDueDate","handleAddTaskClick","pos","console","log","myShelf","myBottle","addTask","upIcon","onChange","event","target","value","downIcon","Bottle","taskItems","bottleTasks","length","taskHTML","push","i","key","isCompleted","unshift","getTasks","Shelf","bottleTitles","bottleHTML","shelfTasks","includes","bottle","bTasks","Array","filter","x","uuidv4","shelf","getBottleTasks","App","tasks","setTasks","newTask","axios","post","then","res","updatedTasks","data","task","catch","err","map","updatedTask","put","delete","useEffect","get","shelfTitles","shelvesHTML","sTasks","Object","values","getShelfTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.97f256df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deleteIcon.b789f4a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/upIcon.cca46599.svg\";","module.exports = __webpack_public_path__ + \"static/media/downIcon.6fd5c4ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/addIcon.5e4c0d9f.svg\";","import React from 'react';\nimport './TaskItem.css';\n\nimport deleteIcon from '../../icons/deleteIcon.svg'\n\nfunction TaskItem(props) {\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\" id={`${props.completed ? \"completed-task-body\" : \"task-body\"}`} /*style={{width: auto}}*/>\n        <div className=\"row\">\n\n          <div className=\"col-1 form-check\" id=\"outline\" data-toggle=\"tooltip\" data-placement=\"left\" title=\"Tick/Untick to complete/uncomplete\">\n            <input \n              type=\"checkbox\" \n              defaultChecked={ props.completed }\n              className=\"form-check-input large-check-box\" \n              id=\"exampleCheck1\" \n              onClick={ () => props.completeTask(props.taskID) }\n            ></input>\n            <label className=\"form-check-label\" htmlFor=\"exampleCheck1\"></label>\n          </div>\n\n          <h6 className=\"card-text col-8\" id=\"outline\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Optional deadline\" display=\"inline\">{props.deadline > 1 ? `${props.deadline} days` : '1 DAY!!!'}</h6>\n\n          <button \n            type=\"button\" className=\"col-1 btn\" onClick={ () => props.deleteTask(props.taskID) }\n\n            data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete task\">\n            <img src={ deleteIcon } alt='' className='delete-svg'/>\n          </button>\n\n          <p \n            id={`${props.completed ? \"completed-task-text\":\"task-text\"}`} \n            className=\"card-text col-12\" \n            data-toggle=\"tooltip\" \n            data-placement=\"bottom\"\n            title=\"Add task text\"\n            >{props.text}\n          </p>    \n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskItem;","import React, { Fragment, useState } from 'react';\nimport './AddTask.css';\nimport upIcon from '../../icons/upIcon.svg'\nimport downIcon from '../../icons/downIcon.svg'\n\n\nfunction AddTask (props) {\n\n    const [text, setText] = useState('');\n    const [dueDate, setDueDate] = useState('');\n\n    let createTaskStatus = 1;\n\n    function handleTextChange(event) {\n        setText(event.target.value);\n    }\n\n    function handleDateChange(event) {\n        setDueDate(event.target.value);\n    }\n\n    function handleAddTaskClick(pos) {\n        console.log(props.myShelf, props.myBottle);\n        props.addTask(text, dueDate, props.myShelf, props.myBottle, pos, props.taskID); // needs to know which pos\n    }\n\n    // return ( \n    //     <Fragment>\n    //         <button \n    //             type=\"button\" className=\"col-12 btn\" id=\"outline\"\n    //             data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add task\" >\n    //             <img src={ addIcon } alt='' className='add-svg'/>\n    //         </button>\n    //     </Fragment>\n    // );\n\n    return  (   \n        <Fragment>\n            <div className=\"card\">\n                <div className=\"card-body\" id='task-body' >\n                    <div className=\"row\">\n\n                        <button \n                            type=\"button\" \n                            className=\"col-2 btn\"\n                            data-toggle=\"tooltip\" \n                            data-placement=\"right\" \n                            title=\"Add task above\"\n                            onClick={ () => handleAddTaskClick(1) }\n                            >\n                            <img src={ upIcon } alt='' className='up-svg'/>\n                        </button>\n\n                        {/* <button \n                            type=\"button\" className=\"col-2 btn\"\n\n                            data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add task below\">\n                            <img src={ downIcon } alt='' className='down-svg'/>\n                        </button> */}\n\n                        <input\n                            type='date'\n                            className=\"card-text col-8\" \n                            id=\"outline\" \n                            data-toggle=\"tooltip\" \n                            data-placement=\"bottom\" \n                            title=\"Optional deadline\" \n                            display=\"inline\"\n                            onChange={ handleDateChange }\n                            value={ dueDate }\n                        />\n                        \n                        <button \n                            type=\"button\" \n                            className=\"col-2 btn\"\n                            data-toggle=\"tooltip\" \n                            data-placement=\"right\" \n                            title=\"Add task below\"\n                            onClick={ () => handleAddTaskClick(0) }\n                            >\n                            <img src={ downIcon } alt='' className='down-svg'/>\n                        </button>\n\n                        {/* <button \n                            type=\"button\" className=\"col-2 btn\" onClick={ () => props.createTask(createTaskStatus) }\n\n                            data-toggle=\"tooltip\" data-placement=\"right\" title=\"Cancel task\" >\n                            <img src={ cancelIcon } alt='' className='delete-svg'/>\n                        </button> */}\n\n                        <input\n                            id='task-text'\n                            className=\"card-text col-12\" \n                            data-toggle=\"tooltip\" \n                            data-placement=\"bottom\"\n                            title=\"Add task text\"\n                            // placeholder='...add task here'\n                            onChange={ handleTextChange }\n                            value = { text }\n                        /> \n\n                    </div>\n                </div>\n            </div>\n        </Fragment> \n    );\n}\nexport default AddTask;","import React from 'react';\nimport './Bottle.css';\nimport TaskItem from '../TaskItem/TaskItem';\nimport AddTask from '../AddTask/AddTask';\n\nimport addIcon from '../../icons/addIcon.svg'\n\nfunction Bottle(props) {\n\n  let taskItems = props.bottleTasks.length;\n\n  function getTasks(props) {\n\n    //let bottleTitles = [];\n    let taskHTML = [];\n\n    // add task button needs to be added here so it's between push and unshifts\n    taskHTML.push(\n      <AddTask \n        myShelf ={ props.myShelf }\n        myBottle={ props.myBottle } \n        addTask={ props.addTask }\n      />);\n    // taskHTML.push(\n    //   <button \n    //     type=\"button\" className=\"col-12 btn\" id=\"outline\"\n    //     data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add task\" onClick={ () => props.addTask() }>\n    //     <img src={ addIcon } alt='' className='add-svg'/>\n    //   </button>);\n\n    // sorts the tasks into the relevant position\n    for (let i = 0; i < props.bottleTasks.length; i++) {\n      switch (props.bottleTasks[i].pos) {\n        case 0:\n          taskHTML.push(\n            <TaskItem \n              key={props.bottleTasks[i].taskID} \n              text={props.bottleTasks[i].text} \n              completed={props.bottleTasks[i].isCompleted} \n              taskID={props.bottleTasks[i].taskID} \n              deadline={props.bottleTasks[i].deadline}\n              deleteTask={ props.deleteTask }\n              completeTask={ props.completeTask }\n            />);\n            break;\n        case 1:\n          taskHTML.unshift(\n            <TaskItem \n              key={props.bottleTasks[i].taskID} \n              text={props.bottleTasks[i].text} \n              completed={props.bottleTasks[i].isCompleted} \n              taskID={props.bottleTasks[i].taskID} \n              deadline={props.bottleTasks[i].deadline}\n              deleteTask={ props.deleteTask }\n              completeTask={ props.completeTask }\n            />);\n          break;\n        default:\n          console.log('invalid pos: ' + props.taskID);\n          break;\n      }\n    }\n    return <div>{taskHTML}</div>;\n  }\n\n  return (\n    <div className=\"container col-12 col-md-6 col-lg-4 col-xl-3 align-self-end bottle\">\n        {getTasks(props)}\n\n      \n        <h2>Bottle: { props.myBottle } tasks remaining {taskItems > 1 ? `${taskItems} tasks` : '1 task'}</h2>\n    </div>\n  );\n}\n\nexport default Bottle;","import React from 'react';\nimport './Shelf.css';\nimport Bottle from '../Bottle/Bottle';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction Shelf(props) {\n\n  function getBottleTasks(props) {\n\n    let bottleTitles = [];\n    let bottleHTML = [];\n\n    // defines the required bottle amount and puts the bottle numbers in an array\n    for (let i = 0; i < props.shelfTasks.length; i++) {\n      if (bottleTitles.includes(props.shelfTasks[i].bottle) === false) {\n        bottleTitles.push(props.shelfTasks[i].bottle);\n      }\n    }\n    let bTasks = new Array(bottleTitles.length);\n\n    // sorts the tasks into the relevant bottle\n    for (let i = 0; i < bottleTitles.length; i++) {\n      bTasks[i] = props.shelfTasks.filter(x => x.bottle === bottleTitles[i]);\n      bottleHTML.push(\n        <Bottle \n          key={ uuidv4() } // change this to shelf?\n          bottleTasks={bTasks[i]} \n          deleteTask={ props.deleteTask } \n          completeTask={ props.completeTask } \n          addTask={ props.addTask }\n          text={props.shelfTasks[i].shelf}\n          myShelf = { props.myShelf }\n          myBottle = { bottleTitles[i] }\n        />);\n    }\n    return <div className=\"row\" id=\"nowrap\">{bottleHTML}</div>;\n  }\n\n  return (\n    <div>\n        <div className=\"container screen\">\n            {getBottleTasks(props)}\n        </div>\n        <div className = \"row shelf\" id=\"nowrap\">{ props.myShelf }</div>\n    </div>\n  );\n}\n\nexport default Shelf;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Shelf from './components/Shelf/Shelf';\n//import AddTask from './components/AddTask/AddTask';\n//import { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\n\nfunction App() {\n\n  // delete function needs confirmation step\n  // regex task str length\n  // seconds since 1970 so subtraction should work\n  // need an add shelf button\n  // each shelf needs a default addtask bottle in addition to any bottles\n  // bottle needs to remain open even if only contains new tasks\n  // d functionality\n\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n      axios\n        .get(\"https://pgbx7na299.execute-api.eu-west-2.amazonaws.com/dev/tasks\")\n        .then(res => {\n          setTasks(res.data.tasks);\n        })\n        .catch(err => {\n          console.log(\"Could not fetch tasks\", err);\n        });\n  }, []);\n\n\n  function addTask(text, dueDate, shelf, bottle, pos) {\n    const newTask = { \n      \"text\": text,\n      \"dueDate\": dueDate,\n      \"isCompleted\": false, \n      \"shelf\": shelf,\n      \"bottle\": bottle, \n      \"pos\": pos,\n      \"username\": \"bob5\"\n    }\n\n    axios\n    .post('https://pgbx7na299.execute-api.eu-west-2.amazonaws.com/dev/tasks', newTask)\n    .then(// If the request is successful, get the task id and add it to the new task object\n      (res) => {\n        const updatedTasks = [ ...tasks, res.data.task[0] ];\n        setTasks( updatedTasks );\n      }\n    )\n    .catch((err) => {\n      console.log('Error in adding a task', err)\n    })\n  }\n\nfunction completeTask(id) {\n\n  //console.log(tasks);\n    const updatedTasks = tasks.map(task => {\n      if(task.taskID === id) {\n        !task.isCompleted ? task.isCompleted = 1 : task.isCompleted = 0;\n      }\n      return task;\n    });\n\n    const updatedTask = tasks.filter(task => task.taskID === id);\n    console.log(updatedTask);\n\n    axios\n    .put(\n      `https://pgbx7na299.execute-api.eu-west-2.amazonaws.com/dev/tasks/${id}`, updatedTask[0]\n    )\n    .then(res => {\n      // There is probably no data returned from a Put request.\n      // But if you're in the \"then\" function you know the request succeeded.\n      console.log('complete ' + id + ' clicked');\n\n    })\n    .catch(err => {\n      console.log(\"Error updating task \" + id, err);\n    });\n\n    setTasks( updatedTasks );\n\n  }\n\n  function deleteTask(id) {\n\n    axios\n      .delete(`https://pgbx7na299.execute-api.eu-west-2.amazonaws.com/dev/tasks/${id}`)\n      .then(res => {\n        // There is probably no data returned from a Delete request.\n        // But if you're in the \"then\" function you know the request succeeded.\n        const updatedTasks = tasks.filter(task => task.taskID !== id);\n        setTasks(updatedTasks);\n      })\n      .catch(err => {\n        console.log(\"Could not delete task\", err);\n      });\n  }\n\n  function getShelfTasks(tasks) {\n\n    let shelfTitles = [];\n    let shelvesHTML = [];\n\n    // defines the required shelf amount and puts the shelf names in an array\n    for (let i = 0; i < tasks.length; i++) {\n      if (shelfTitles.includes(tasks[i].shelf) === false) {\n        shelfTitles.push(tasks[i].shelf);\n      }\n    }\n    let sTasks = new Array(shelfTitles.length);\n\n    // sorts the tasks into the relevant shelf\n    for (let i = 0; i < shelfTitles.length; i++) {\n      sTasks[i] = Object.values(tasks).filter(x => x.shelf === shelfTitles[i]);\n      shelvesHTML.push(<Shelf key={ shelfTitles[i] } myShelf={ shelfTitles[i] } shelfTasks={sTasks[i]} deleteTask={ deleteTask } completeTask={ completeTask } addTask={ addTask }/>);\n    }\n    return <div>{shelvesHTML}</div>;\n  }\n\n  return (\n        <div className=\"App\">\n          {getShelfTasks(tasks)}\n        </div>\n  );\n}\n        \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}