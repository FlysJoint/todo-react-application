{"version":3,"sources":["components/TaskItem/TaskItem.js","components/TasksContainer/TasksContainer.js","components/Shelf/Shelf.js","App.js","serviceWorker.js","index.js"],"names":["TaskItem","task","className","id","data-toggle","data-placement","title","display","deadline","text","TasksContainer","taskContainer","isCompleted","Shelf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UA2BeA,MAtBf,SAAkBC,GAQhB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,YAAYC,GAAG,aAC5B,yBAAKD,UAAU,OACb,wBAAIA,UAAU,mBAAmBC,GAAG,UAAUC,cAAY,UAAUC,iBAAe,OAAOC,MAAM,sCAAhG,KACA,wBAAIJ,UAAU,kBAAkBE,cAAY,UAAUC,iBAAe,SAASC,MAAM,oBAAoBC,QAAQ,UAAUN,EAAKO,UAC/H,wBAAIN,UAAU,mBAAmBC,GAAG,UAAUC,cAAY,UAAUC,iBAAe,QAAQC,MAAM,eAAjG,KACA,uBAAGJ,UAAU,mBAAmBC,GAAG,YAAYC,cAAY,UAAUC,iBAAe,SAASC,MAAM,iBAAiBL,EAAKQ,UCHpHC,MAXf,SAAwBC,GACtB,OACE,yBAAKT,UAAU,uEACX,kBAAC,EAAD,CAAUO,KAAK,qBAAqBD,SAAS,SAASI,YAAY,UAClE,kBAAC,EAAD,CAAUH,KAAK,oBAAoBD,SAAS,UAAUI,YAAY,UAClE,kBAAC,EAAD,CAAUH,KAAK,uBAAuBG,YAAY,SAClD,4BARQ,EAQR,cCSOC,MAjBf,WACE,OACE,6BACI,yBAAKX,UAAU,oBACX,yBAAKA,UAAU,MAAMC,GAAG,UACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGR,yBAAKD,UAAY,YAAYC,GAAG,aCDzBW,MAXf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.978283fe.chunk.js","sourcesContent":["import React from 'react';\nimport './TaskItem.css';\n\n\n\nfunction TaskItem(task) {\n\n  //let taskComplete = this.isCompleted;\n\n  // function isTaskComplete() {\n  //   taskComplete = false ? \"task-body\" : \"completed-task-body\";\n  // }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\" id=\"task-body\" /*style={{width: auto}}*/>\n        <div className=\"row\">\n          <h6 className=\"card-title col-2\" id=\"id-text\" data-toggle=\"tooltip\" data-placement=\"left\" title=\"Tick/Untick to complete/uncomplete\">C</h6>\n          <h6 className=\"card-text col-8\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Optional deadline\" display=\"inline\">{task.deadline}</h6>\n          <h6 className=\"card-title col-2\" id=\"id-text\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete task\">X</h6>\n          <p className=\"card-text col-12\" id=\"task-text\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Add task text\">{task.text}</p>                                                 \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskItem;","import React from 'react';\nimport './TasksContainer.css';\nimport TaskItem from '../TaskItem/TaskItem';\n\nlet taskItems = 0;\n\nfunction TasksContainer(taskContainer) {\n  return (\n    <div className=\"container col-12 col-md-6 col-lg-4 col-xl-3 align-self-end task-box\">\n        <TaskItem text='task one text here' deadline='5 days' isCompleted='false'/>\n        <TaskItem text='task 17 text here' deadline='0 days!' isCompleted='false'/>\n        <TaskItem text='task forty text here' isCompleted='true'/>\n        <h2>{taskItems} Task(s)</h2>\n    </div>\n  );\n}\n\nexport default TasksContainer;","import React from 'react';\nimport './Shelf.css';\nimport TasksContainer from '../TasksContainer/TasksContainer';\n\nfunction Shelf() {\n  return (\n    <div>\n        <div className=\"container screen\">\n            <div className=\"row\" id=\"nowrap\">\n                <TasksContainer/>\n                <TasksContainer/>\n                <TasksContainer/>\n                <TasksContainer/>\n                <TasksContainer/>\n            </div>\n        </div>\n        <div className = \"row shelf\" id=\"nowrap\"></div>\n    </div>\n  );\n}\n\nexport default Shelf;","import React from 'react';\nimport './App.css';\nimport Shelf from './components/Shelf/Shelf';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Shelf/>\n      <Shelf/>\n      <Shelf/>\n      <Shelf/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}